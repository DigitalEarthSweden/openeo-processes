{
    "id": "reduce_dimension",
    "summary": "Reduce dimensions",
    "description": "Applies a reducer to a data cube dimension by collapsing all the pixel values along the specified dimension into an output value computed by the reducer. The dimension is dropped. To avoid dropping the dimension, use ``apply_dimension()`` instead.\n\nA reducer is a single process or a set of processes, which computes a single value for a list of values, see the category 'reducer' for such processes.\n\nThe process can also work on two values by setting the parameter `binary` to `true`. In this case, the reducer doesn't get executed on a single value.",
    "categories": [
        "cubes",
        "reducer"
    ],
    "parameter_order": [
        "data",
        "reducer",
        "dimension",
        "binary"
    ],
    "parameters": {
        "data": {
            "description": "A data cube.",
            "schema": {
                "type": "object",
                "subtype": "raster-cube"
            },
            "required": true
        },
        "reducer": {
            "description": "A reducer to apply on the specified dimension.\n\nThe reducer may be a single process such as ``mean()`` or consist of multiple sub-processes. By default, a reducer must accept an array as input, but the reducer can also work on two values by setting the parameter `binary` to `true`.\n\nThe reducer must compute a single value.",
            "required": true,
            "schema": [
                {
                    "title": "Unary behaviour",
                    "description": "Passes an array to the reducer.",
                    "type": "object",
                    "subtype": "process-graph",
                    "parameters": {
                        "data": {
                            "description": "An array with elements of any data type.",
                            "type": "array",
                            "items": {
                                "description": "Any data type."
                            }
                        }
                    }
                },
                {
                    "title": "Binary behaviour",
                    "description": "Passes two values to the reducer.",
                    "type": "object",
                    "subtype": "process-graph",
                    "parameters": {
                        "x": {
                            "description": "The first value. Any data type could be passed."
                        },
                        "y": {
                            "description": "The second value. Any data type could be passed."
                        }
                    }
                }
            ]
        },
        "dimension": {
            "description": "The name of the dimension over which to reduce. Fails with a `DimensionNotAvailable` error if the specified dimension does not exist.\n\n**Remarks:**\n\n* The default dimensions a data cube provides are described in the collection's metadata field `cube:dimensions`.\n* There could be multiple spatial dimensions such as `x`, `y` or `z`.\n* For multi-spectral imagery there is usually a separate dimension of type `bands` for the bands.",
            "schema": {
                "type": "string"
            },
            "required": true
        },
        "binary": {
            "description": "Specifies whether the process should pass two values to the reducer (binary mode) or a list of values (default).\n\nIf the process passes two values to the reducer, the reducer must be both associative and commutative as the execution may be executed in parallel and therefore the order of execution is arbitrary.\n\nThis parameter is especially useful for UDFs passed as reducers. Back-ends may still optimize and parallelize processes that work on list of values.",
            "schema": {
                "type": "boolean"
            },
            "default": false
        }
    },
    "returns": {
        "description": "A data cube with the newly computed values. It has one dimension less than the original data cube, but the remaining dimensions have their resolution and cardinality preserved.",
        "schema": {
            "type": "object",
            "subtype": "raster-cube"
        }
    },
    "exceptions": {
        "DimensionNotAvailable": {
            "message": "A dimension with the specified name does not exist."
        }
    },
    "links": [
        {
            "rel": "about",
            "href": "https://en.wikipedia.org/wiki/Reduction_Operator",
            "title": "Background information on reduction operators (binary reducers) by Wikipedia"
        }
    ]
}
