{
    "id": "fit_curve",
    "summary": "Curve fitting",
    "description": "Use non-linear least squares to fit a model function `y = f(x, parameters)` to data.",
    "categories": [
        "math"
    ],
    "experimental": true,
    "parameters": [
        {
            "name": "data",
            "description": "The values for `y` (dependent data) as an array of numbers.",
            "schema": {
                "type": "array",
                "items": {
                    "type": [
                        "number",
                        "null"
                    ]
                }
            }
        },
        {
            "name": "labels",
            "description": "The values for `x` (independent variable where the data is measured) as an array of numbers.\n\nUse the process ``array_labels()`` to retrieve the labels for a labeled array.",
            "schema": {
                "type": "array",
                "items": {
                    "anyOf": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "string",
                            "format": "date",
                            "subtype": "date"
                        },
                        {
                            "type": "string",
                            "format": "date-time",
                            "subtype": "date-time"
                        }
                    ]
                }
            }
        },
        {
            "name": "parameters",
            "description": "Defined the number of parameters for the model function and provides an initial guess for them. At least one parameter is required.",
            "schema": {
                "type": "array",
                "minItems": 1,
                "items": {
                    "type": "number"
                }
            }
        },
        {
            "name": "function",
            "description": "The model function. It must take the parameters to fit as array through the first argument and the independent variable `x` as the second argument.\n\nIt is recommended to store the model function as a user-defined process on the back-end to be able to re-use the model function with the computed optimal values for the parameters afterwards.",
            "schema": {
                "type": "object",
                "subtype": "process-graph",
                "parameters": [
                    {
                        "name": "x",
                        "description": "The value for the independent variable `x`.",
                        "schema": {
                            "type": [
                                "number"
                            ]
                        }
                    },
                    {
                        "name": "parameters",
                        "description": "The parameters for the model function, contains at least one parameter.",
                        "schema": {
                            "type": "array",
                            "minItems": 1,
                            "items": {
                                "type": "number"
                            }
                        }
                    }
                ],
                "returns": {
                    "description": "The computed value `y` value for the given independent variable `x` and the parameters.",
                    "schema": {
                        "type": "number"
                    }
                }
            }
        },
        {
            "name": "ignore_invalid",
            "description": "By default, the process throws an `InvalidValues` exception if invalid values are encountered. Invalid values are finite numbers (see also ``is_valid()``). Enabling this parameter ignores invalid values, but may lead to nonsensical results if invalid values are present.",
            "schema": {
                "type": "boolean"
            },
            "default": false,
            "optional": true
        }
    ],
    "returns": {
        "description": "An array with the optimal values for the parameters.",
        "schema": {
            "type": "array",
            "minItems": 1,
            "items": {
                "type": "number"
            }
        }
    },
    "exceptions": {
        "InvalidValues": {
            "message": "At least one of the values is not a finite number."
        }
    }
}