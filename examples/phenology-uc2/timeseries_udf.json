{
    "getcollection1": {
        "process_id": "get_collection",
        "arguments": {
            "name": "CGS_SENTINEL2_RADIOMETRY_V102_001"
        },
        "result": false
    },
    "filtertemporal1": {
        "process_id": "filter_temporal",
        "arguments": {
            "data": {
                "from_node": "getcollection1"
            },
            "from": "2017-05-01",
            "to": "2017-10-01"
        },
        "result": false
    },
    "filterbbox1": {
        "process_id": "filter_bbox",
        "arguments": {
            "data": {
                "from_node": "filtertemporal1"
            },
            "west": 5.143297433853149,
            "east": 5.159090280532837,
            "north": 51.18450357774117,
            "south": 51.18163191723127,
            "crs": "EPSG:4326"
        },
        "result": false
    },
    "reduce1": {
        "process_id": "reduce",
        "arguments": {
            "data": {
                "from_node": "filterbbox1"
            },
            "dimension": "spectral_bands",
            "reducer": {
                "callback": {
                    "arrayelement1": {
                        "process_id": "array_element",
                        "arguments": {
                            "data": {
                                "from_argument": "data"
                            },
                            "index": 3
                        },
                        "result": false
                    },
                    "arrayelement2": {
                        "process_id": "array_element",
                        "arguments": {
                            "data": {
                                "from_argument": "data"
                            },
                            "index": 2
                        },
                        "result": false
                    },
                    "subtract1": {
                        "process_id": "subtract",
                        "arguments": {
                            "data": [
                                {
                                    "from_node": "arrayelement1"
                                },
                                {
                                    "from_node": "arrayelement2"
                                }
                            ]
                        },
                        "result": false
                    },
                    "product1": {
                        "process_id": "product",
                        "arguments": {
                            "data": [
                                {
                                    "from_node": "subtract1"
                                },
                                2.5
                            ]
                        },
                        "result": false
                    },
                    "product2": {
                        "process_id": "product",
                        "arguments": {
                            "data": [
                                {
                                    "from_node": "arrayelement2"
                                },
                                6.0
                            ]
                        },
                        "result": false
                    },
                    "sum1": {
                        "process_id": "sum",
                        "arguments": {
                            "data": [
                                {
                                    "from_node": "arrayelement1"
                                },
                                {
                                    "from_node": "product2"
                                }
                            ]
                        },
                        "result": false
                    },
                    "arrayelement3": {
                        "process_id": "array_element",
                        "arguments": {
                            "data": {
                                "from_argument": "data"
                            },
                            "index": 0
                        },
                        "result": false
                    },
                    "product3": {
                        "process_id": "product",
                        "arguments": {
                            "data": [
                                {
                                    "from_node": "arrayelement3"
                                },
                                7.5
                            ]
                        },
                        "result": false
                    },
                    "subtract2": {
                        "process_id": "subtract",
                        "arguments": {
                            "data": [
                                {
                                    "from_node": "sum1"
                                },
                                {
                                    "from_node": "product3"
                                }
                            ]
                        },
                        "result": false
                    },
                    "sum2": {
                        "process_id": "sum",
                        "arguments": {
                            "data": [
                                {
                                    "from_node": "subtract2"
                                },
                                1.0
                            ]
                        },
                        "result": false
                    },
                    "divide1": {
                        "process_id": "divide",
                        "arguments": {
                            "data": [
                                {
                                    "from_node": "product1"
                                },
                                {
                                    "from_node": "sum2"
                                }
                            ]
                        },
                        "result": true
                    }
                }
            }
        },
        "result": false
    },
    "applydimension1": {
        "process_id": "apply_dimension",
        "arguments": {
            "data": {
                "from_node": "reduce1"
            },
            "dimension": "temporal",
            "process": {
                "callback": {
                    "udf": {
                        "arguments": {
                            "data": {
                                "from_argument": "data"
                            },
                            "runtime": "Python",
                            "version": "latest",
                            "udf": "# -*- coding: utf-8 -*-\n# Uncomment the import only for coding support\n#from openeo_udf.api.base import SpatialExtent, RasterCollectionTile, FeatureCollectionTile, UdfData\n\n__license__ = \"Apache License, Version 2.0\"\n\n\ndef rct_savitzky_golay(udf_data):\n    from scipy.signal import savgol_filter\n    import pandas as pd\n    # Iterate over each tile\n    for tile in udf_data.raster_collection_tiles:\n        timeseries_array = tile.data\n        #TODO: savitzky golay implementation assumes regularly spaced samples!\n\n        #first we ensure that there are no nodata values in our input, as this will cause everything to become nodata.\n        array_2d = timeseries_array.reshape((timeseries_array.shape[0], timeseries_array.shape[1] * timeseries_array.shape[2]))\n\n        df = pd.DataFrame(array_2d)\n        #df.fillna(method='ffill', axis=0, inplace=True)\n        df.interpolate(inplace=True,axis=0)\n        filled=df.as_matrix().reshape(timeseries_array.shape)\n\n        #now apply savitzky golay on filled data\n        smoothed_array = savgol_filter(filled, 5, 1,axis=0)\n        #print(smoothed_array)\n        tile.set_data(smoothed_array)\n\n\n# This function call is the entry point for the UDF.\n# The caller will provide all required data in the **data** object.\nrct_savitzky_golay(data)\n"
                        },
                        "process_id": "run_udf",
                        "result": true
                    }
                }
            }
        },
        "result": false
    },
    "aggregatepolygon1": {
        "process_id": "aggregate_polygon",
        "arguments": {
            "data": {
                "from_node": "applydimension1"
            },
            "polygons": {
                "type": "Polygon",
                "coordinates": [
                    [
                        [
                            5.143297433853149,
                            51.18163191723127
                        ],
                        [
                            5.143297433853149,
                            51.18450357774117
                        ],
                        [
                            5.159090280532837,
                            51.18450357774117
                        ],
                        [
                            5.159090280532837,
                            51.18163191723127
                        ],
                        [
                            5.143297433853149,
                            51.18163191723127
                        ]
                    ]
                ],
                "crs": {
                    "type": "name",
                    "properties": {
                        "name": "EPSG:4326"
                    }
                }
            },
            "reducer": {
                "callback": {
                    "unary": {
                        "arguments": {
                            "data": {
                                "from_argument": "data"
                            }
                        },
                        "process_id": "mean",
                        "result": true
                    }
                }
            }
        },
        "result": false
    }
}