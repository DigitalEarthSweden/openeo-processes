{
    "id": "array_apply",
    "summary": "Applies a unary process to each array element",
    "description": "Applies a **unary** process which takes a single value such as `abs` or `sqrt` to each value in the array. This is basically what other languages call either a `for each` loop or a `map` function.",
    "categories": [
        "arrays"
    ],
    "parameters": [
        {
            "name": "data",
            "description": "An array.",
            "schema": {
                "type": "array",
                "items": {
                    "description": "Any data type is allowed."
                }
            },
            "required": true
        },
        {
            "name": "process",
            "description": "A process to be applied on each value, may consist of multiple sub-processes. The specified process must be unary meaning that it must work on a single value.",
            "schema": {
                "type": "object",
                "subtype": "process-graph",
                "parameters": [
                    {
                        "name": "x",
                        "description": "The value of the current element being processed.",
                        "required": true,
                        "schema": {
                            "description": "Any data type."
                        }
                    },
                    {
                        "name": "index",
                        "description": "The zero-based index or the label of the current element being processed. Labels take preference over indices.",
                        "required": true,
                        "schema": [
                            {
                                "type": "number"
                            },
                            {
                                "type": "string"
                            }
                        ]
                    }
                ]
            },
            "required": true
        }
    ],
    "returns": {
        "description": "An array with the newly computed values. The number of elements are the same as for the original array.",
        "schema": {
            "type": "array",
            "items": {
                "description": "Any data type is allowed."
            }
        }
    }
}